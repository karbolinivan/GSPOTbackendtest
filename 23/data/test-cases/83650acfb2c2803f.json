{"uid":"83650acfb2c2803f","name":"Check if we can not create the service with an existing name","fullName":"tests.payments.payment_accounts.test_increase_balance_post.TestPaymentsPostList#test_negative_increase_balance_post","historyId":"332b274747bf6284997bb0a4bcde575c","time":{"start":1693821867854,"stop":1693821868398,"duration":544},"description":"Проверка ответа [400] при создании сервиса оплаты с уже существующим именем","descriptionHtml":"<p>Проверка ответа [400] при создании сервиса оплаты с уже существующим именем</p>\n","status":"skipped","statusMessage":"XFAIL https://trello.com/c/5JhiBEV8\n\nAssertionError: assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\n +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text","statusTrace":"self = <test_increase_balance_post.TestPaymentsPostList object at 0x7f10a6915b90>\n\n    @allure.title('Check if we can not create the service with an existing name')\n    @allure.description(f\"Проверка ответа [400] при создании сервиса оплаты с уже существующим именем\")\n    @pytest.mark.xfail(reason=\"https://trello.com/c/5JhiBEV8\")\n    def test_negative_increase_balance_post(self):\n        uuid_test = str(uuid.uuid4())  # random uuid\n        payload = {\n            \"payment_type\": \"bank_card\",\n            \"payment_service\": \"yookassa\",\n            \"payment_amount\": -1,\n            \"user_uuid\": uuid_test,\n            \"return_url\": \"string\"\n        }\n        response = increase_balance(json=payload)\n        expected = {\"payment_amount\": [\"Insufficient Funds\"]}\n        print(response.text)\n        assert_status_code(response=response, expected=400)\n>       assert response.text == expected\nE       assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\nE        +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text\n\ntests/payments/payment_accounts/test_increase_balance_post.py:51: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693821734728,"stop":1693821734853,"duration":125},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Проверка ответа [400] при создании сервиса оплаты с уже существующим именем","status":"skipped","statusMessage":"XFAIL https://trello.com/c/5JhiBEV8\n\nAssertionError: assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\n +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text","statusTrace":"self = <test_increase_balance_post.TestPaymentsPostList object at 0x7f10a6915b90>\n\n    @allure.title('Check if we can not create the service with an existing name')\n    @allure.description(f\"Проверка ответа [400] при создании сервиса оплаты с уже существующим именем\")\n    @pytest.mark.xfail(reason=\"https://trello.com/c/5JhiBEV8\")\n    def test_negative_increase_balance_post(self):\n        uuid_test = str(uuid.uuid4())  # random uuid\n        payload = {\n            \"payment_type\": \"bank_card\",\n            \"payment_service\": \"yookassa\",\n            \"payment_amount\": -1,\n            \"user_uuid\": uuid_test,\n            \"return_url\": \"string\"\n        }\n        response = increase_balance(json=payload)\n        expected = {\"payment_amount\": [\"Insufficient Funds\"]}\n        print(response.text)\n        assert_status_code(response=response, expected=400)\n>       assert response.text == expected\nE       assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\nE        +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text\n\ntests/payments/payment_accounts/test_increase_balance_post.py:51: AssertionError","steps":[{"name":"Increase balance","time":{"start":1693821867855,"stop":1693821868397,"duration":542},"status":"passed","steps":[{"name":"POST request to:\n'https://payments.alpha.g-spot.website/api/v1/payment_accounts/increase_balance/'","time":{"start":1693821867855,"stop":1693821868397,"duration":542},"status":"passed","steps":[],"attachments":[{"uid":"7b1a435c2383f328","name":"Logs","source":"7b1a435c2383f328.txt","type":"text/plain","size":879}],"parameters":[{"name":"url","value":"'https://payments.alpha.g-spot.website/api/v1/payment_accounts/increase_balance/'"},{"name":"data","value":"None"},{"name":"json","value":"{'payment_type': 'bank_card', 'payment_service': 'yookassa', 'payment_amount': -1, 'user_uuid': 'e3b38ef5-ae72-4190-aeb4-53aaf32d3da0', 'return_url': 'string'}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[{"name":"json","value":"{'payment_type': 'bank_card', 'payment_service': 'yookassa', 'payment_amount': -1, 'user_uuid': 'e3b38ef5-ae72-4190-aeb4-53aaf32d3da0', 'return_url': 'string'}"},{"name":"auth","value":"None"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true},{"name":"Assertion of a status code","time":{"start":1693821868397,"stop":1693821868397,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected","value":"400"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"a7e34893adddba4b","name":"stdout","source":"a7e34893adddba4b.txt","type":"text/plain","size":78}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"suite","value":"Tests increase balance"},{"name":"feature","value":"Payment Accounts"},{"name":"epic","value":"Payments"},{"name":"story","value":"Balances"},{"name":"tag","value":"@pytest.mark.xfail(reason='https://trello.com/c/5JhiBEV8')"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.payments.payment_accounts"},{"name":"subSuite","value":"TestPaymentsPostList"},{"name":"host","value":"21aedc7e375f"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.payments.payment_accounts.test_increase_balance_post"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":5,"passed":0,"unknown":0,"total":5},"items":[{"uid":"76972abfa417cae6","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/22//#testresult/76972abfa417cae6","status":"skipped","statusDetails":"XFAIL https://trello.com/c/5JhiBEV8\n\nAssertionError: assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\n +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text","time":{"start":1693217005490,"stop":1693217005897,"duration":407}},{"uid":"11cbeed74a7922d2","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/21//#testresult/11cbeed74a7922d2","status":"skipped","statusDetails":"XFAIL https://trello.com/c/5JhiBEV8\n\nAssertionError: assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\n +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text","time":{"start":1692895825255,"stop":1692895825691,"duration":436}},{"uid":"de563795ea730a3","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/20//#testresult/de563795ea730a3","status":"skipped","statusDetails":"XFAIL https://trello.com/c/5JhiBEV8\n\nAssertionError: assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\n +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text","time":{"start":1692612251569,"stop":1692612252178,"duration":609}},{"uid":"76d73b5793f67fc","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/19//#testresult/76d73b5793f67fc","status":"skipped","statusDetails":"XFAIL https://trello.com/c/5JhiBEV8\n\nAssertionError: assert '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' == {'payment_amount': ['Insufficient Funds']}\n +  where '{\"payment_amount\":[\"Insufficient Funds\"],\"return_url\":[\"Enter a valid URL.\"]}' = <Response [400]>.text","time":{"start":1692359049638,"stop":1692359050069,"duration":431}}]},"tags":["@pytest.mark.xfail(reason='https://trello.com/c/5JhiBEV8')","smoke"]},"source":"83650acfb2c2803f.json","parameterValues":[]}