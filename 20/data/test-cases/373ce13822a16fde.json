{"uid":"373ce13822a16fde","name":"Test payment accounts owner partial update invalid value param payout_day_of_month","fullName":"tests.payments.payment_accounts.owner.field_payout_day_of_month.test_payment_accounts_owner_payout_day_patch.TestPaymentPatchOwnerRegression#test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_patch","historyId":"cc3f53a9783b2ff1df06a1f7561f3965","time":{"start":1692612303654,"stop":1692612304329,"duration":675},"description":"Проверка ответа [400] при частичном обновлении payout_day_of_month невалидными значениями","descriptionHtml":"<p>Проверка ответа [400] при частичном обновлении payout_day_of_month невалидными значениями</p>\n","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","statusTrace":"self = <test_payment_accounts_owner_payout_day_patch.TestPaymentPatchOwnerRegression object at 0x7f8f43a31fd0>\nvalue = 0\n\n    @allure.title('Test payment accounts owner partial update invalid value param payout_day_of_month')\n    @allure.description('Проверка ответа [400] при частичном обновлении payout_day_of_month невалидными значениями')\n    @pytest.mark.parametrize(\"value\", [0, 33, -10, \"%$#@\", 'twenty', '   ', '1 9', ''])\n    def test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_patch(self, value):\n        \"\"\"Частичное обновление параметра payout_day_of_month владельца невалидными значениями\"\"\"\n        print(\"Запрос PATCH\")\n        payload = {\n            \"commission\": \"10\",\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": value\n        }\n        response = update_owner_partial(json=payload)\n        if isinstance(value, int) and (value < 1 or value > 31):\n>           pytest.xfail(\"failing validation actual status code 200, expected status code 400\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400\n\ntests/payments/payment_accounts/owner/field_payout_day_of_month/test_payment_accounts_owner_payout_day_patch.py:55: XFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1692612113719,"stop":1692612113836,"duration":117},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Проверка ответа [400] при частичном обновлении payout_day_of_month невалидными значениями","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","statusTrace":"self = <test_payment_accounts_owner_payout_day_patch.TestPaymentPatchOwnerRegression object at 0x7f8f43a31fd0>\nvalue = 0\n\n    @allure.title('Test payment accounts owner partial update invalid value param payout_day_of_month')\n    @allure.description('Проверка ответа [400] при частичном обновлении payout_day_of_month невалидными значениями')\n    @pytest.mark.parametrize(\"value\", [0, 33, -10, \"%$#@\", 'twenty', '   ', '1 9', ''])\n    def test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_patch(self, value):\n        \"\"\"Частичное обновление параметра payout_day_of_month владельца невалидными значениями\"\"\"\n        print(\"Запрос PATCH\")\n        payload = {\n            \"commission\": \"10\",\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": value\n        }\n        response = update_owner_partial(json=payload)\n        if isinstance(value, int) and (value < 1 or value > 31):\n>           pytest.xfail(\"failing validation actual status code 200, expected status code 400\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400\n\ntests/payments/payment_accounts/owner/field_payout_day_of_month/test_payment_accounts_owner_payout_day_patch.py:55: XFailed","steps":[{"name":"Partial update owner","time":{"start":1692612303655,"stop":1692612304329,"duration":674},"status":"passed","steps":[{"name":"PATCH request to:\n'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'","time":{"start":1692612303655,"stop":1692612304329,"duration":674},"status":"passed","steps":[],"attachments":[{"uid":"ed9024da14625730","name":"Logs","source":"ed9024da14625730.txt","type":"text/plain","size":929}],"parameters":[{"name":"url","value":"'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'"},{"name":"data","value":"None"},{"name":"json","value":"{'commission': '10', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 0}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"json","value":"{'commission': '10', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 0}"}],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"e2aa357bb05af016","name":"stdout","source":"e2aa357bb05af016.txt","type":"text/plain","size":19}],"parameters":[],"stepsCount":2,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Payment accounts"},{"name":"epic","value":"Payments"},{"name":"story","value":"Owner"},{"name":"suite","value":"Test patch owners regression"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.payments.payment_accounts.owner.field_payout_day_of_month"},{"name":"subSuite","value":"TestPaymentPatchOwnerRegression"},{"name":"host","value":"8c47c01d477a"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.payments.payment_accounts.owner.field_payout_day_of_month.test_payment_accounts_owner_payout_day_patch"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"value","value":"0"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":2,"passed":0,"unknown":0,"total":2},"items":[{"uid":"86d250f6ccdb6f33","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/19//#testresult/86d250f6ccdb6f33","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","time":{"start":1692359085247,"stop":1692359085629,"duration":382}}]},"tags":["regression"]},"source":"373ce13822a16fde.json","parameterValues":["0"]}