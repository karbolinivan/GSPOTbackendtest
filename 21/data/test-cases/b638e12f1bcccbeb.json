{"uid":"b638e12f1bcccbeb","name":"Test payment accounts owner update invalid value param payout_day_of_month","fullName":"tests.payments.payment_accounts.owner.field_payout_day_of_month.test_payment_accounts_owner_payout_day_put.TestPaymentPutOwnerRegression#test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_put","historyId":"3f8c754c89926a6e5428cb06d489b4b5","time":{"start":1692895867128,"stop":1692895867590,"duration":462},"description":"Проверка ответа [400] при изменении payout_day_of_month невалидными значениями","descriptionHtml":"<p>Проверка ответа [400] при изменении payout_day_of_month невалидными значениями</p>\n","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","statusTrace":"self = <test_payment_accounts_owner_payout_day_put.TestPaymentPutOwnerRegression object at 0x7fd1da047b50>\nvalue = -10\n\n    @allure.title('Test payment accounts owner update invalid value param payout_day_of_month')\n    @allure.description('Проверка ответа [400] при изменении payout_day_of_month невалидными значениями')\n    @pytest.mark.parametrize(\"value\", [0, 33, -10, \"%$#@\", 'twenty', '   ', '1 9', ''])\n    def test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_put(self, value):\n        \"\"\"Изменение параметра payout_day_of_month владельца невалидными значениями\"\"\"\n        print(\"Запрос PUT\")\n        payload = {\n            \"commission\": \"10\",\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": value\n        }\n        response = update_owner(json=payload)\n        if isinstance(value, int) and (value < 1 or value > 31):\n>           pytest.xfail(\"failing validation actual status code 200, expected status code 400\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400\n\ntests/payments/payment_accounts/owner/field_payout_day_of_month/test_payment_accounts_owner_payout_day_put.py:56: XFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1692895721954,"stop":1692895722103,"duration":149},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Проверка ответа [400] при изменении payout_day_of_month невалидными значениями","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","statusTrace":"self = <test_payment_accounts_owner_payout_day_put.TestPaymentPutOwnerRegression object at 0x7fd1da047b50>\nvalue = -10\n\n    @allure.title('Test payment accounts owner update invalid value param payout_day_of_month')\n    @allure.description('Проверка ответа [400] при изменении payout_day_of_month невалидными значениями')\n    @pytest.mark.parametrize(\"value\", [0, 33, -10, \"%$#@\", 'twenty', '   ', '1 9', ''])\n    def test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_put(self, value):\n        \"\"\"Изменение параметра payout_day_of_month владельца невалидными значениями\"\"\"\n        print(\"Запрос PUT\")\n        payload = {\n            \"commission\": \"10\",\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": value\n        }\n        response = update_owner(json=payload)\n        if isinstance(value, int) and (value < 1 or value > 31):\n>           pytest.xfail(\"failing validation actual status code 200, expected status code 400\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400\n\ntests/payments/payment_accounts/owner/field_payout_day_of_month/test_payment_accounts_owner_payout_day_put.py:56: XFailed","steps":[{"name":"Update owner","time":{"start":1692895867128,"stop":1692895867590,"duration":462},"status":"passed","steps":[{"name":"PUT request to:\n'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'","time":{"start":1692895867129,"stop":1692895867590,"duration":461},"status":"passed","steps":[],"attachments":[{"uid":"28bc629b537743ee","name":"Logs","source":"28bc629b537743ee.txt","type":"text/plain","size":931}],"parameters":[{"name":"url","value":"'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'"},{"name":"data","value":"None"},{"name":"json","value":"{'commission': '10', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': -10}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"json","value":"{'commission': '10', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': -10}"}],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"488244063d85e7e3","name":"stdout","source":"488244063d85e7e3.txt","type":"text/plain","size":17}],"parameters":[],"stepsCount":2,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"suite","value":"Test put owners regression"},{"name":"feature","value":"Payment accounts"},{"name":"story","value":"Owner"},{"name":"epic","value":"Payments"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.payments.payment_accounts.owner.field_payout_day_of_month"},{"name":"subSuite","value":"TestPaymentPutOwnerRegression"},{"name":"host","value":"4a7b1454829c"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.payments.payment_accounts.owner.field_payout_day_of_month.test_payment_accounts_owner_payout_day_put"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"value","value":"-10"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":3,"passed":0,"unknown":0,"total":3},"items":[{"uid":"23a56a4d781a44af","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/20//#testresult/23a56a4d781a44af","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","time":{"start":1692612312821,"stop":1692612313468,"duration":647}},{"uid":"797e59c102021d2c","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/19//#testresult/797e59c102021d2c","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","time":{"start":1692359090867,"stop":1692359091251,"duration":384}}]},"tags":["regression"]},"source":"b638e12f1bcccbeb.json","parameterValues":["-10"]}