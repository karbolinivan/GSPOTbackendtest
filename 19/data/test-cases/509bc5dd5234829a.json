{"uid":"509bc5dd5234829a","name":"TG103-Test filters platforms list","fullName":"tests.games.utils.test_filters_platforms.TestFiltersPlatforms#test_filters_platforms_list","historyId":"c9802df6a8bcb286c8c157ba43fad5e7","time":{"start":1692359027306,"stop":1692359027750,"duration":444},"description":"Проверка успешного ответа [200] при запросе фильтра по операционной системе","descriptionHtml":"<p>Проверка успешного ответа [200] при запросе фильтра по операционной системе</p>\n","status":"skipped","statusMessage":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.games.operating_system.OperatingSystem() argument after ** must be a mapping, not str","statusTrace":"self = <tests.games.utils.test_filters_platforms.TestFiltersPlatforms object at 0x7effb8448210>\n\n    @allure.title(f'{Cases.GAMES[\"TG103\"][\"id\"]}-Test filters platforms list')\n    @allure.description('Проверка успешного ответа [200] при запросе фильтра по операционной системе')\n    @allure.testcase(name=Cases.GAMES[\"TG103\"][\"name\"], url=Cases.GAMES[\"TG103\"][\"link\"])\n    def test_filters_platforms_list(self):\n        response = filters.platforms_list()\n        assertions.status_code(actual=response.status_code, expected=200)\n>       assertions.json_by_model(actual=response.json(), model=OperatingSystem)\n\ntests/games/utils/test_filters_platforms.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = ['Linux']\nmodel = <class 'source.schemas.games.operating_system.OperatingSystem'>\n\n    @staticmethod\n    @allure.step('Assertion json by the model')\n    def json_by_model(actual, model):\n        try:\n            if isinstance(actual, list):\n                for item in actual:\n>                   model(**item)\nE                   TypeError: source.schemas.games.operating_system.OperatingSystem() argument after ** must be a mapping, not str\n\nsource/base/validator.py:72: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1692358940886,"stop":1692358941017,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Проверка успешного ответа [200] при запросе фильтра по операционной системе","status":"skipped","statusMessage":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.games.operating_system.OperatingSystem() argument after ** must be a mapping, not str","statusTrace":"self = <tests.games.utils.test_filters_platforms.TestFiltersPlatforms object at 0x7effb8448210>\n\n    @allure.title(f'{Cases.GAMES[\"TG103\"][\"id\"]}-Test filters platforms list')\n    @allure.description('Проверка успешного ответа [200] при запросе фильтра по операционной системе')\n    @allure.testcase(name=Cases.GAMES[\"TG103\"][\"name\"], url=Cases.GAMES[\"TG103\"][\"link\"])\n    def test_filters_platforms_list(self):\n        response = filters.platforms_list()\n        assertions.status_code(actual=response.status_code, expected=200)\n>       assertions.json_by_model(actual=response.json(), model=OperatingSystem)\n\ntests/games/utils/test_filters_platforms.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = ['Linux']\nmodel = <class 'source.schemas.games.operating_system.OperatingSystem'>\n\n    @staticmethod\n    @allure.step('Assertion json by the model')\n    def json_by_model(actual, model):\n        try:\n            if isinstance(actual, list):\n                for item in actual:\n>                   model(**item)\nE                   TypeError: source.schemas.games.operating_system.OperatingSystem() argument after ** must be a mapping, not str\n\nsource/base/validator.py:72: TypeError","steps":[{"name":"Get filters platforms list","time":{"start":1692359027306,"stop":1692359027750,"duration":444},"status":"passed","steps":[{"name":"GET request to:\n'https://games.alpha.g-spot.website/api/v1/utils/filters/platforms'","time":{"start":1692359027306,"stop":1692359027750,"duration":444},"status":"passed","steps":[],"attachments":[{"uid":"5bb462d325675899","name":"Logs","source":"5bb462d325675899.txt","type":"text/plain","size":674}],"parameters":[{"name":"url","value":"'https://games.alpha.g-spot.website/api/v1/utils/filters/platforms'"},{"name":"params","value":"{'limit': None, 'offset': None}"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"limit","value":"None"},{"name":"offset","value":"None"}],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assertion of a status code","time":{"start":1692359027750,"stop":1692359027750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"200"},{"name":"expected","value":"200"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assertion json by the model","time":{"start":1692359027750,"stop":1692359027750,"duration":0},"status":"broken","statusMessage":"TypeError: source.schemas.games.operating_system.OperatingSystem() argument after ** must be a mapping, not str\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/project/source/base/validator.py\", line 72, in json_by_model\n    model(**item)\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"['Linux']"},{"name":"model","value":"<class 'source.schemas.games.operating_system.OperatingSystem'>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Games"},{"name":"story","value":"Filter by platform"},{"name":"feature","value":"Utils"},{"name":"suite","value":"Test get filters platforms list"},{"name":"tag","value":"@pytest.mark.xfail(reason='The list items do not match the model')"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.games.utils"},{"name":"subSuite","value":"TestFiltersPlatforms"},{"name":"host","value":"6ef337d038cd"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.games.utils.test_filters_platforms"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"utils_filters_platforms_get.md","url":"https://github.com/victoretc/GSPOTtestingdocumentation/blob/main/games/utils/utils_filters_platforms_get.md","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":7,"passed":0,"unknown":0,"total":7},"items":[{"uid":"7b596491b640255","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/16//#testresult/7b596491b640255","status":"skipped","statusDetails":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1691402604801,"stop":1691402605702,"duration":901}},{"uid":"d402b9d1b30ec540","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/15//#testresult/d402b9d1b30ec540","status":"skipped","statusDetails":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1691153307646,"stop":1691153308362,"duration":716}},{"uid":"9c703e61543594c6","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/14//#testresult/9c703e61543594c6","status":"skipped","statusDetails":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1690906835338,"stop":1690906836279,"duration":941}},{"uid":"ad79a7405f857f37","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/13//#testresult/ad79a7405f857f37","status":"skipped","statusDetails":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1690797822606,"stop":1690797823591,"duration":985}},{"uid":"41ea105a65ca22e6","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/12//#testresult/41ea105a65ca22e6","status":"skipped","statusDetails":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1690751695898,"stop":1690751696923,"duration":1025}},{"uid":"b3a2e87e50b7fad","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/11//#testresult/b3a2e87e50b7fad","status":"skipped","statusDetails":"XFAIL The list items do not match the model\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1690660453551,"stop":1690660454276,"duration":725}}]},"tags":["smoke","@pytest.mark.xfail(reason='The list items do not match the model')"]},"source":"509bc5dd5234829a.json","parameterValues":[]}