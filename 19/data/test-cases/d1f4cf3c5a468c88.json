{"uid":"d1f4cf3c5a468c88","name":"Test payment accounts owner update valid value param commission","fullName":"tests.payments.payment_accounts.owner.field_commission.test_payment_accounts_owner_commission_put.TestPaymentPutOwner#test_payment_accounts_owner_positive_input_valid_value_param_commission_put","historyId":"15c29e06c2d56bc221b6a24cdb6d7619","time":{"start":1692359058929,"stop":1692359059349,"duration":420},"description":"Проверка успешного ответа [200] при изменении commission владельца валидными значениями","descriptionHtml":"<p>Проверка успешного ответа [200] при изменении commission владельца валидными значениями</p>\n","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","statusTrace":"self = <test_payment_accounts_owner_commission_put.TestPaymentPutOwner object at 0x7effb84a8610>\nvalue = ''\n\n    @allure.title('Test payment accounts owner update valid value param commission')\n    @allure.description('Проверка успешного ответа [200] при изменении commission владельца валидными значениями')\n    @pytest.mark.parametrize(\"value\", [\"0\", \"50\", \"100\", \"5.5\", \"1.22\", \"\"])\n    def test_payment_accounts_owner_positive_input_valid_value_param_commission_put(self, value):\n        \"\"\"Изменение параметра  commission владельца валидными значениями\"\"\"\n        print(\"Запрос PUT\")\n        payload = {\n            \"commission\": f'{value}',\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": 4\n        }\n        response = update_owner(json=payload)\n        if isinstance(value, str) and value == \"\":\n            print(\"expected status code 200\")\n>           pytest.xfail(\"failing validation actual status code 400, expected status code 200\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200\n\ntests/payments/payment_accounts/owner/field_commission/test_payment_accounts_owner_commission_put.py:32: XFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1692358940886,"stop":1692358941017,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Проверка успешного ответа [200] при изменении commission владельца валидными значениями","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","statusTrace":"self = <test_payment_accounts_owner_commission_put.TestPaymentPutOwner object at 0x7effb84a8610>\nvalue = ''\n\n    @allure.title('Test payment accounts owner update valid value param commission')\n    @allure.description('Проверка успешного ответа [200] при изменении commission владельца валидными значениями')\n    @pytest.mark.parametrize(\"value\", [\"0\", \"50\", \"100\", \"5.5\", \"1.22\", \"\"])\n    def test_payment_accounts_owner_positive_input_valid_value_param_commission_put(self, value):\n        \"\"\"Изменение параметра  commission владельца валидными значениями\"\"\"\n        print(\"Запрос PUT\")\n        payload = {\n            \"commission\": f'{value}',\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": 4\n        }\n        response = update_owner(json=payload)\n        if isinstance(value, str) and value == \"\":\n            print(\"expected status code 200\")\n>           pytest.xfail(\"failing validation actual status code 400, expected status code 200\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200\n\ntests/payments/payment_accounts/owner/field_commission/test_payment_accounts_owner_commission_put.py:32: XFailed","steps":[{"name":"Update owner","time":{"start":1692359058929,"stop":1692359059348,"duration":419},"status":"passed","steps":[{"name":"PUT request to:\n'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'","time":{"start":1692359058929,"stop":1692359059348,"duration":419},"status":"passed","steps":[],"attachments":[{"uid":"55bcff1bda80bf55","name":"Logs","source":"55bcff1bda80bf55.txt","type":"text/plain","size":763}],"parameters":[{"name":"url","value":"'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'"},{"name":"data","value":"None"},{"name":"json","value":"{'commission': '', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 4}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"json","value":"{'commission': '', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 4}"}],"stepsCount":1,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"9b05ff5702202fc0","name":"stdout","source":"9b05ff5702202fc0.txt","type":"text/plain","size":42}],"parameters":[],"stepsCount":2,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"Owner"},{"name":"epic","value":"Payments"},{"name":"suite","value":"Test put owners"},{"name":"feature","value":"Payment accounts"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.payments.payment_accounts.owner.field_commission"},{"name":"subSuite","value":"TestPaymentPutOwner"},{"name":"host","value":"6ef337d038cd"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.payments.payment_accounts.owner.field_commission.test_payment_accounts_owner_commission_put"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"value","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["smoke"]},"source":"d1f4cf3c5a468c88.json","parameterValues":["''"]}