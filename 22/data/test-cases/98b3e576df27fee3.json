{"uid":"98b3e576df27fee3","name":"Test payment accounts owner update invalid value param payout_day_of_month","fullName":"tests.payments.payment_accounts.owner.field_payout_day_of_month.test_payment_accounts_owner_payout_day_put.TestPaymentPutOwnerRegression#test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_put","historyId":"efd7c207b9afa52a76fe310a64e64522","time":{"start":1693217045475,"stop":1693217045909,"duration":434},"description":"Проверка ответа [400] при изменении payout_day_of_month невалидными значениями","descriptionHtml":"<p>Проверка ответа [400] при изменении payout_day_of_month невалидными значениями</p>\n","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","statusTrace":"self = <test_payment_accounts_owner_payout_day_put.TestPaymentPutOwnerRegression object at 0x7f80d0cf7f50>\nvalue = 33\n\n    @allure.title('Test payment accounts owner update invalid value param payout_day_of_month')\n    @allure.description('Проверка ответа [400] при изменении payout_day_of_month невалидными значениями')\n    @pytest.mark.parametrize(\"value\", [0, 33, -10, \"%$#@\", 'twenty', '   ', '1 9', ''])\n    def test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_put(self, value):\n        \"\"\"Изменение параметра payout_day_of_month владельца невалидными значениями\"\"\"\n        print(\"Запрос PUT\")\n        payload = {\n            \"commission\": \"10\",\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": value\n        }\n        response = update_owner(json=payload)\n        if isinstance(value, int) and (value < 1 or value > 31):\n>           pytest.xfail(\"failing validation actual status code 200, expected status code 400\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400\n\ntests/payments/payment_accounts/owner/field_payout_day_of_month/test_payment_accounts_owner_payout_day_put.py:56: XFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693216906115,"stop":1693216906241,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"description":"Проверка ответа [400] при изменении payout_day_of_month невалидными значениями","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","statusTrace":"self = <test_payment_accounts_owner_payout_day_put.TestPaymentPutOwnerRegression object at 0x7f80d0cf7f50>\nvalue = 33\n\n    @allure.title('Test payment accounts owner update invalid value param payout_day_of_month')\n    @allure.description('Проверка ответа [400] при изменении payout_day_of_month невалидными значениями')\n    @pytest.mark.parametrize(\"value\", [0, 33, -10, \"%$#@\", 'twenty', '   ', '1 9', ''])\n    def test_payment_accounts_owner_positive_input_invalid_value_param_payout_day_of_month_put(self, value):\n        \"\"\"Изменение параметра payout_day_of_month владельца невалидными значениями\"\"\"\n        print(\"Запрос PUT\")\n        payload = {\n            \"commission\": \"10\",\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": value\n        }\n        response = update_owner(json=payload)\n        if isinstance(value, int) and (value < 1 or value > 31):\n>           pytest.xfail(\"failing validation actual status code 200, expected status code 400\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400\n\ntests/payments/payment_accounts/owner/field_payout_day_of_month/test_payment_accounts_owner_payout_day_put.py:56: XFailed","steps":[{"name":"Update owner","time":{"start":1693217045475,"stop":1693217045909,"duration":434},"status":"passed","steps":[{"name":"PUT request to:\n'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'","time":{"start":1693217045475,"stop":1693217045909,"duration":434},"status":"passed","steps":[],"attachments":[{"uid":"5931c0abb4dad6f0","name":"Logs","source":"5931c0abb4dad6f0.txt","type":"text/plain","size":929}],"parameters":[{"name":"url","value":"'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'"},{"name":"data","value":"None"},{"name":"json","value":"{'commission': '10', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 33}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0,"attachmentsCount":1}],"attachments":[],"parameters":[{"name":"json","value":"{'commission': '10', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 33}"}],"shouldDisplayMessage":false,"hasContent":true,"stepsCount":1,"attachmentsCount":1}],"attachments":[{"uid":"a06f809376279e0","name":"stdout","source":"a06f809376279e0.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"Payment accounts"},{"name":"story","value":"Owner"},{"name":"epic","value":"Payments"},{"name":"suite","value":"Test put owners regression"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.payments.payment_accounts.owner.field_payout_day_of_month"},{"name":"subSuite","value":"TestPaymentPutOwnerRegression"},{"name":"host","value":"3b39dcdf8748"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.payments.payment_accounts.owner.field_payout_day_of_month.test_payment_accounts_owner_payout_day_put"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"value","value":"33"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":4,"passed":0,"unknown":0,"total":4},"items":[{"uid":"41bf7196a01a09b6","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/21//#testresult/41bf7196a01a09b6","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","time":{"start":1692895866680,"stop":1692895867122,"duration":442}},{"uid":"5893af018f51b0c4","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/20//#testresult/5893af018f51b0c4","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","time":{"start":1692612312172,"stop":1692612312813,"duration":641}},{"uid":"c9fbb685b14f2fc7","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/19//#testresult/c9fbb685b14f2fc7","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 200, expected status code 400\n\n_pytest.outcomes.XFailed: failing validation actual status code 200, expected status code 400","time":{"start":1692359090456,"stop":1692359090863,"duration":407}}]},"tags":["regression"]},"source":"98b3e576df27fee3.json","parameterValues":["33"]}