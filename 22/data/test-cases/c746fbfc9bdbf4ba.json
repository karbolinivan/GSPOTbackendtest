{"uid":"c746fbfc9bdbf4ba","name":"Test payment accounts owner partial update valid value param commission","fullName":"tests.payments.payment_accounts.owner.field_commission.test_payment_accounts_owner_commission_patch.TestPaymentPatchOwner#test_payment_accounts_owner_positive_input_valid_value_param_commission_patch","historyId":"a1af0f356dd28a9efcd41e1f7e1f5349","time":{"start":1693217008527,"stop":1693217008939,"duration":412},"description":"Проверка успешного ответа [200] при частичном обновлении commission валидными значениями","descriptionHtml":"<p>Проверка успешного ответа [200] при частичном обновлении commission валидными значениями</p>\n","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","statusTrace":"self = <test_payment_accounts_owner_commission_patch.TestPaymentPatchOwner object at 0x7f80d0c83650>\nvalue = ''\n\n    @allure.title('Test payment accounts owner partial update valid value param commission')\n    @allure.description('Проверка успешного ответа [200] при частичном обновлении commission валидными значениями')\n    @pytest.mark.parametrize(\"value\", [\"0\", \"50\", \"100\", \"5.5\", \"1.22\", \"\"])\n    def test_payment_accounts_owner_positive_input_valid_value_param_commission_patch(self, value):\n        \"\"\"Частичное обновление commission владельца валидными значениями\"\"\"\n        print(\"Запрос PATCH\")\n        payload = {\n            \"commission\": f'{value}',\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": 4\n        }\n        response = update_owner_partial(json=payload)\n        if isinstance(value, str) and value == \"\":\n            print(\"expected status code 200\")\n>           pytest.xfail(\"failing validation actual status code 400, expected status code 200\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200\n\ntests/payments/payment_accounts/owner/field_commission/test_payment_accounts_owner_commission_patch.py:32: XFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693216906115,"stop":1693216906241,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"description":"Проверка успешного ответа [200] при частичном обновлении commission валидными значениями","status":"skipped","statusMessage":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","statusTrace":"self = <test_payment_accounts_owner_commission_patch.TestPaymentPatchOwner object at 0x7f80d0c83650>\nvalue = ''\n\n    @allure.title('Test payment accounts owner partial update valid value param commission')\n    @allure.description('Проверка успешного ответа [200] при частичном обновлении commission валидными значениями')\n    @pytest.mark.parametrize(\"value\", [\"0\", \"50\", \"100\", \"5.5\", \"1.22\", \"\"])\n    def test_payment_accounts_owner_positive_input_valid_value_param_commission_patch(self, value):\n        \"\"\"Частичное обновление commission владельца валидными значениями\"\"\"\n        print(\"Запрос PATCH\")\n        payload = {\n            \"commission\": f'{value}',\n            \"frozen_time\": \"10\",\n            \"gift_time\": \"5\",\n            \"payout_day_of_month\": 4\n        }\n        response = update_owner_partial(json=payload)\n        if isinstance(value, str) and value == \"\":\n            print(\"expected status code 200\")\n>           pytest.xfail(\"failing validation actual status code 400, expected status code 200\")\nE           _pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200\n\ntests/payments/payment_accounts/owner/field_commission/test_payment_accounts_owner_commission_patch.py:32: XFailed","steps":[{"name":"Partial update owner","time":{"start":1693217008528,"stop":1693217008939,"duration":411},"status":"passed","steps":[{"name":"PATCH request to:\n'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'","time":{"start":1693217008528,"stop":1693217008939,"duration":411},"status":"passed","steps":[],"attachments":[{"uid":"76be4d8802e3df20","name":"Logs","source":"76be4d8802e3df20.txt","type":"text/plain","size":765}],"parameters":[{"name":"url","value":"'https://payments.alpha.g-spot.website/api/v1/payment_accounts/owner/'"},{"name":"data","value":"None"},{"name":"json","value":"{'commission': '', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 4}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"None"}],"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0,"attachmentsCount":1}],"attachments":[],"parameters":[{"name":"json","value":"{'commission': '', 'frozen_time': '10', 'gift_time': '5', 'payout_day_of_month': 4}"}],"shouldDisplayMessage":false,"hasContent":true,"stepsCount":1,"attachmentsCount":1}],"attachments":[{"uid":"d806d5eb59c89653","name":"stdout","source":"d806d5eb59c89653.txt","type":"text/plain","size":44}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"Payment accounts"},{"name":"story","value":"Owner"},{"name":"epic","value":"Payments"},{"name":"suite","value":"Test patch owners"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.payments.payment_accounts.owner.field_commission"},{"name":"subSuite","value":"TestPaymentPatchOwner"},{"name":"host","value":"3b39dcdf8748"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.payments.payment_accounts.owner.field_commission.test_payment_accounts_owner_commission_patch"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"value","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":4,"passed":0,"unknown":0,"total":4},"items":[{"uid":"9e84851a8dff7778","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/21//#testresult/9e84851a8dff7778","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","time":{"start":1692895828241,"stop":1692895828670,"duration":429}},{"uid":"4d3d9e5cb2b42ba3","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/20//#testresult/4d3d9e5cb2b42ba3","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","time":{"start":1692612256066,"stop":1692612256728,"duration":662}},{"uid":"508fee137c14ecca","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/19//#testresult/508fee137c14ecca","status":"skipped","statusDetails":"XFAIL reason: failing validation actual status code 400, expected status code 200\n\n_pytest.outcomes.XFailed: failing validation actual status code 400, expected status code 200","time":{"start":1692359052672,"stop":1692359053081,"duration":409}}]},"tags":["smoke"]},"source":"c746fbfc9bdbf4ba.json","parameterValues":["''"]}