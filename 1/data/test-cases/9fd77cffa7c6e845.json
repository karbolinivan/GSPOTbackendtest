{"uid":"9fd77cffa7c6e845","name":"Test languages create with checking the boundary values","fullName":"tests.games.reference.languages.test_post_languages.TestLanguagesCreateRegression#test_languages_create_with_boundary_values","historyId":"6753a822f5921329695ff451c9b1fd61","time":{"start":1689954939942,"stop":1689954940884,"duration":942},"description":"Проверка граничных значений поля \"name\" при создании языка","descriptionHtml":"<p>Проверка граничных значений поля &quot;name&quot; при создании языка</p>\n","status":"failed","statusMessage":"AssertionError: json is not equal to json.\nResponse: {'name': ['Это поле не может быть пустым.']}","statusTrace":"self = <tests.games.reference.languages.test_post_languages.TestLanguagesCreateRegression object at 0x7f7e39944290>\nvalue = '', expected = 400, massage = ['This field may not be blank']\ndelete_created_data = <function _delete_created_data at 0x7f7e3b422fc0>\n\n    @allure.title('Test languages create with checking the boundary values')\n    @allure.description('Проверка граничных значений поля \"name\" при создании языка')\n    @pytest.mark.parametrize(\"value, expected, massage\", [\n        (\"\", 400, ExpectedJSON.FIELD_CANNOT_BE_EMPTY.value),\n        (\"e\", 201, None),\n        (\"qwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiop\", 201,\n         None),\n        (\"qwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopA\", 400,\n         ExpectedJSON.FIELD_CANNOT_CONTAINS_MORE_100.value)\n    ])\n    def test_languages_create_with_boundary_values(self, value, expected, massage, delete_created_data):\n        payload = Generator.object(model=Language, name=value)\n        response = create_languages(json=payload)\n        if len(value) < 1 or len(value) > 100:\n            expected_json = ExpectedJSON.key_value(key='name', value=massage)\n            assert_status_code(response=response, expected=expected)\n>           assert_json_equal_json(response=response, json=expected_json)\n\ntests/games/reference/languages/test_post_languages.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/base/validator.py:58: in assert_json_equal_json\n    return Assertion(response=response).assert_json_equal_json(json=json)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <source.base.validator.Assertion object at 0x7f7e38ddaa50>\njson = {'name': ['This field may not be blank']}\n\n    @allure.step('Assertion of a json equal json')\n    def assert_json_equal_json(self, json):\n>       assert self.response.json() == json, f'{GlobalError.INVALID_JSON}.\\n'\\\n                                             f'Response: {self.response.json()}'\nE       AssertionError: json is not equal to json.\nE       Response: {'name': ['Это поле не может быть пустым.']}\n\nsource/base/validator.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1689954905555,"stop":1689954905672,"duration":117},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"delete_created_data","time":{"start":1689954939941,"stop":1689954939941,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Проверка граничных значений поля \"name\" при создании языка","status":"failed","statusMessage":"AssertionError: json is not equal to json.\nResponse: {'name': ['Это поле не может быть пустым.']}","statusTrace":"self = <tests.games.reference.languages.test_post_languages.TestLanguagesCreateRegression object at 0x7f7e39944290>\nvalue = '', expected = 400, massage = ['This field may not be blank']\ndelete_created_data = <function _delete_created_data at 0x7f7e3b422fc0>\n\n    @allure.title('Test languages create with checking the boundary values')\n    @allure.description('Проверка граничных значений поля \"name\" при создании языка')\n    @pytest.mark.parametrize(\"value, expected, massage\", [\n        (\"\", 400, ExpectedJSON.FIELD_CANNOT_BE_EMPTY.value),\n        (\"e\", 201, None),\n        (\"qwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiop\", 201,\n         None),\n        (\"qwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopqwertyuiopA\", 400,\n         ExpectedJSON.FIELD_CANNOT_CONTAINS_MORE_100.value)\n    ])\n    def test_languages_create_with_boundary_values(self, value, expected, massage, delete_created_data):\n        payload = Generator.object(model=Language, name=value)\n        response = create_languages(json=payload)\n        if len(value) < 1 or len(value) > 100:\n            expected_json = ExpectedJSON.key_value(key='name', value=massage)\n            assert_status_code(response=response, expected=expected)\n>           assert_json_equal_json(response=response, json=expected_json)\n\ntests/games/reference/languages/test_post_languages.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/base/validator.py:58: in assert_json_equal_json\n    return Assertion(response=response).assert_json_equal_json(json=json)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <source.base.validator.Assertion object at 0x7f7e38ddaa50>\njson = {'name': ['This field may not be blank']}\n\n    @allure.step('Assertion of a json equal json')\n    def assert_json_equal_json(self, json):\n>       assert self.response.json() == json, f'{GlobalError.INVALID_JSON}.\\n'\\\n                                             f'Response: {self.response.json()}'\nE       AssertionError: json is not equal to json.\nE       Response: {'name': ['Это поле не может быть пустым.']}\n\nsource/base/validator.py:37: AssertionError","steps":[{"name":"Generating data based on json model <class 'source.schemas.laguage_schema.Language'>","time":{"start":1689954939942,"stop":1689954939963,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"model","value":"<class 'source.schemas.laguage_schema.Language'>"},{"name":"lang","value":"None"},{"name":"seed","value":"None"},{"name":"include","value":"None"},{"name":"exclude","value":"None"},{"name":"name","value":"''"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Create a language","time":{"start":1689954939963,"stop":1689954940883,"duration":920},"status":"passed","steps":[{"name":"POST request to 'https://games.alpha.g-spot.website/api/v1/reference/languages/'","time":{"start":1689954939963,"stop":1689954940883,"duration":920},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://games.alpha.g-spot.website/api/v1/reference/languages/'"},{"name":"data","value":"None"},{"name":"json","value":"{'name': ''}"},{"name":"params","value":"None"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"('tester', 'tester')"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"json","value":"{'name': ''}"},{"name":"auth","value":"('tester', 'tester')"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assertion of a status code","time":{"start":1689954940883,"stop":1689954940883,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected","value":"400"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assertion of a json equal json","time":{"start":1689954940883,"stop":1689954940883,"duration":0},"status":"failed","statusMessage":"AssertionError: json is not equal to json.\nResponse: {'name': ['Это поле не может быть пустым.']}\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/project/source/base/validator.py\", line 37, in assert_json_equal_json\n    assert self.response.json() == json, f'{GlobalError.INVALID_JSON}.\\n'\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"json","value":"{'name': ['This field may not be blank']}"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Reference"},{"name":"suite","value":"Regression-tests post languages"},{"name":"epic","value":"Games"},{"name":"story","value":"Languages"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.games.reference.languages"},{"name":"subSuite","value":"TestLanguagesCreateRegression"},{"name":"host","value":"51456541d1fc"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.games.reference.languages.test_post_languages"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected","value":"400"},{"name":"massage","value":"['This field may not be blank']"},{"name":"value","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"fb547aa42b1ff354","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/1//#testresult/fb547aa42b1ff354","status":"failed","statusDetails":"AssertionError: json is not equal to json.\nResponse: {'name': ['Это поле не может быть пустым.']}","time":{"start":1689954554758,"stop":1689954555708,"duration":950}}]},"tags":["regression"]},"source":"9fd77cffa7c6e845.json","parameterValues":["400","['This field may not be blank']","''"]}