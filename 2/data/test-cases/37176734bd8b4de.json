{"uid":"37176734bd8b4de","name":"Test filters platforms list","fullName":"tests.games.utils.test_filters_platforms.TestFiltersPlatforms#test_filters_platforms_list","historyId":"c9802df6a8bcb286c8c157ba43fad5e7","time":{"start":1689963477649,"stop":1689963478499,"duration":850},"description":"Проверка успешного ответа [200] при запросе фильтра по операционной системе","descriptionHtml":"<p>Проверка успешного ответа [200] при запросе фильтра по операционной системе</p>\n","status":"skipped","statusMessage":"XFAIL\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","statusTrace":"self = <tests.games.utils.test_filters_platforms.TestFiltersPlatforms object at 0x7f5e7b3d9ed0>\n\n    @allure.title('Test filters platforms list')\n    @allure.description('Проверка успешного ответа [200] при запросе фильтра по операционной системе')\n    def test_filters_platforms_list(self):\n        response = get_filters_platforms_list()\n        assert_status_code(response=response, expected=200)\n>       assert_json_by_model(response=response, model=OperatingSystem)\n\ntests/games/utils/test_filters_platforms.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/base/validator.py:50: in assert_json_by_model\n    return Assertion(response=response).assert_json_by_model(model=model)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <source.base.validator.Assertion object at 0x7f5e7a811f10>\nmodel = <class 'source.schemas.operating_system.OperatingSystem'>\n\n    @allure.step('Assertion json by the model')\n    def assert_json_by_model(self, model):\n        try:\n            if isinstance(self.response.json(), list):\n                for item in self.response.json():\n>                   model(**item)\nE                   TypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str\n\nsource/base/validator.py:20: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1689963384050,"stop":1689963384166,"duration":116},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Проверка успешного ответа [200] при запросе фильтра по операционной системе","status":"skipped","statusMessage":"XFAIL\n\nTypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","statusTrace":"self = <tests.games.utils.test_filters_platforms.TestFiltersPlatforms object at 0x7f5e7b3d9ed0>\n\n    @allure.title('Test filters platforms list')\n    @allure.description('Проверка успешного ответа [200] при запросе фильтра по операционной системе')\n    def test_filters_platforms_list(self):\n        response = get_filters_platforms_list()\n        assert_status_code(response=response, expected=200)\n>       assert_json_by_model(response=response, model=OperatingSystem)\n\ntests/games/utils/test_filters_platforms.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/base/validator.py:50: in assert_json_by_model\n    return Assertion(response=response).assert_json_by_model(model=model)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <source.base.validator.Assertion object at 0x7f5e7a811f10>\nmodel = <class 'source.schemas.operating_system.OperatingSystem'>\n\n    @allure.step('Assertion json by the model')\n    def assert_json_by_model(self, model):\n        try:\n            if isinstance(self.response.json(), list):\n                for item in self.response.json():\n>                   model(**item)\nE                   TypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str\n\nsource/base/validator.py:20: TypeError","steps":[{"name":"Get filters platforms list","time":{"start":1689963477650,"stop":1689963478498,"duration":848},"status":"passed","steps":[{"name":"GET request to 'https://games.alpha.g-spot.website/api/v1/utils/filters/platforms'","time":{"start":1689963477650,"stop":1689963478498,"duration":848},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://games.alpha.g-spot.website/api/v1/utils/filters/platforms'"},{"name":"params","value":"{'limit': None, 'offset': None}"},{"name":"headers","value":"None"},{"name":"cookies","value":"None"},{"name":"auth","value":"('tester', 'tester')"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"limit","value":"None"},{"name":"offset","value":"None"},{"name":"auth","value":"('tester', 'tester')"}],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assertion of a status code","time":{"start":1689963478499,"stop":1689963478499,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected","value":"200"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Assertion json by the model","time":{"start":1689963478499,"stop":1689963478499,"duration":0},"status":"broken","statusMessage":"TypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/project/source/base/validator.py\", line 20, in assert_json_by_model\n    model(**item)\n","steps":[],"attachments":[],"parameters":[{"name":"model","value":"<class 'source.schemas.operating_system.OperatingSystem'>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Utils"},{"name":"epic","value":"Games"},{"name":"suite","value":"Test get filters platforms list"},{"name":"story","value":"Filter by platform"},{"name":"tag","value":"@pytest.mark.xfail(mark='The list items do not match the model')"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.games.utils"},{"name":"subSuite","value":"TestFiltersPlatforms"},{"name":"host","value":"5a47ff30050d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.games.utils.test_filters_platforms"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":2,"skipped":1,"passed":0,"unknown":0,"total":3},"items":[{"uid":"d0f7090d60b7c015","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/1//#testresult/d0f7090d60b7c015","status":"broken","statusDetails":"TypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1689954987581,"stop":1689954988539,"duration":958}},{"uid":"8ea3b877e218b6cd","reportUrl":"https://karbolinivan.github.io/GSPOTbackendtest/1//#testresult/8ea3b877e218b6cd","status":"broken","statusDetails":"TypeError: source.schemas.operating_system.OperatingSystem() argument after ** must be a mapping, not str","time":{"start":1689954597919,"stop":1689954598835,"duration":916}}]},"tags":["@pytest.mark.xfail(mark='The list items do not match the model')","smoke"]},"source":"37176734bd8b4de.json","parameterValues":[]}